<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd">


    <!-- 注意要在 web.xml 中扫描此配置文件 -->

    <bean id="successHandler"  class="com.dj.bms.modules.security.service.impl.AuthenticationSuccessServiceImpl"/>
    <bean id="failureHandler"  class="com.dj.bms.modules.security.service.impl.AuthenticationFailureServiceImpl"/>

    <!-- security="none"：对指定的 URL 放行，不拦截。如一些静态文件。另外放行登录 URL 避免拦截，造成无法登录 -->
    <!-- <security:http security="none" pattern="/admin/login" /> -->

	<!-- 1.auto-config：是否自动配置过滤器，默认是 false
		 2.entry-point-ref：自定义认证切入点 -->
    <security:http auto-config="false" use-expressions="true">
        <!--
            1.login-page：表示自定义登录页面
            2.login-processing-url：表示登录时提交的地址
            3.username-parameter：表示登录时用户名使用的是哪个参数
            4.password-parameter：表示登录时密码使用的是哪个参数
            5.default-target-url：默认情况下，在登录成功后会返回到原本受限制的页面，
            					如果用户是直接请求登录页面，登录成功后默认情况下会跳转到当前应用的根路径，即欢迎页面。
            					default-target-url 属性可以指定，用户直接访问登录页面并登陆成功后跳转的页面。
            					如果想让用户不管是直接请求登录页面，还是通过 Spring Security 引导过来的，登录之后都跳转到指定的页面，
            					可以使用 always-use-default-target 属性为 true 来达到这一效果。
            6.authentication-success-handler-ref：对应一个 AuthencticationSuccessHandler 实现类的引用。
            					登录认证成功后会调用指定 AuthenticationSuccessHandler 的 onAuthenticationSuccess 方法，
            					在此方法中进行登陆成功后的处理，此时 default-target-url 属性失效。
            7.authentication-failure-url：指定登录认证失败后跳转的页面，默认情况下登录失败后会以重定向的方式返回登录页面。
            					请注意登录失败后跳转的页面，也需放行，否则又会被重定向到登录页面。
            8.authentication-failure-handler-ref：对应一个用于处理认证失败的 AuthenticationFailureHandler 实现类。
                				指定了该属性，Spring Security 在认证失败后会调用指定 AuthenticationFailureHandler 的 
                				onAuthenticationFailure 方法对认证失败进行处理。此时 authentication-failure-url 属性将不再发生作用。
         -->


        <security:form-login login-page="/login.jsp"
                            login-processing-url="/login"
                            username-parameter="username"
                            password-parameter="password"
                            default-target-url="/index.jsp"
                            authentication-success-handler-ref="successHandler"
                            authentication-failure-url="/login.jsp"
                            authentication-failure-handler-ref="failureHandler"/>

        <security:logout logout-success-url="/login.jsp"
                        logout-url="/logout" 
                        invalidate-session="true" 
                        delete-cookies="JSESSIONID" />
		
		<!-- 放行登录 URL 避免拦截，造成无法登录 -->
		<security:intercept-url pattern="/login.jsp" access="permitAll()" />
        <!-- 设置访问所有的 URL 都必须登录 -->
        <security:intercept-url pattern="/**" access="isAuthenticated()" />

        <!-- 指定登陆认证成功后，用户访问未授权的 URL 将跳转的 URL -->
        <security:access-denied-handler error-page="/error"/>

        <security:session-management session-fixation-protection="none">
            <!-- 
                max-sessions="1"：同一用户只能在一个浏览器登录，当尝试在其他浏览器登陆时将被拒绝
                error-if-maximum-exceeded="true"：当设置了此属性，尝试在其他浏览器登录时，则原会话将被终止，将在新窗口建立新会话
            -->
            <security:concurrency-control max-sessions="1"/>
        </security:session-management>

        <security:csrf disabled="true" />
        
        <security:headers>
        	<!-- 允许同源域名嵌套 ifname 页面 -->
        	<security:frame-options policy="SAMEORIGIN"/>
        	<!-- 允许所有域名嵌套 ifname 页面 -->
        	<!-- <security:frame-options disabled="true"/> -->
    	</security:headers>
    </security:http>

    <!-- 配置认证管理器，当 UsernamePasswordAuthenticationFilter 拦截器拦截到用户的认证请求后，
   		  会调用认证管理器进行认证 -->
    <security:authentication-manager>
    <!-- 认证管理器会委托给认证提供者进行认证，所以还需要配置认证提供者，其中要指定用户服务接口 -->
    <security:authentication-provider user-service-ref="authenticationUserDetailsServiceImpl">
    <!-- 使用自定义的对象对用户提交的密码进行加密操作 -->
    <security:password-encoder ref="authenticationMd5PasswordEncoderServiceImpl"/>
    </security:authentication-provider>
    </security:authentication-manager>

</beans>