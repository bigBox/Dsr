// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonDefine.proto

package com.dj.protobuf.common;

/**
 * Protobuf enum {@code Protocols.FortuneType}
 */
public enum FortuneType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *金币
   * </pre>
   *
   * <code>Coin = 1;</code>
   */
  Coin(1),
  /**
   * <pre>
   *钻石
   * </pre>
   *
   * <code>Diamond = 2;</code>
   */
  Diamond(2),
  /**
   * <pre>
   *体力
   * </pre>
   *
   * <code>Stamina = 3;</code>
   */
  Stamina(3),
  /**
   * <pre>
   *经验
   * </pre>
   *
   * <code>Experience = 4;</code>
   */
  Experience(4),
  /**
   * <pre>
   *VIP经验
   * </pre>
   *
   * <code>VipExp = 32;</code>
   */
  VipExp(32),
  ;

  /**
   * <pre>
   *金币
   * </pre>
   *
   * <code>Coin = 1;</code>
   */
  public static final int Coin_VALUE = 1;
  /**
   * <pre>
   *钻石
   * </pre>
   *
   * <code>Diamond = 2;</code>
   */
  public static final int Diamond_VALUE = 2;
  /**
   * <pre>
   *体力
   * </pre>
   *
   * <code>Stamina = 3;</code>
   */
  public static final int Stamina_VALUE = 3;
  /**
   * <pre>
   *经验
   * </pre>
   *
   * <code>Experience = 4;</code>
   */
  public static final int Experience_VALUE = 4;
  /**
   * <pre>
   *VIP经验
   * </pre>
   *
   * <code>VipExp = 32;</code>
   */
  public static final int VipExp_VALUE = 32;


  public final int getNumber() {
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static FortuneType valueOf(int value) {
    return forNumber(value);
  }

  public static FortuneType forNumber(int value) {
    switch (value) {
      case 1: return Coin;
      case 2: return Diamond;
      case 3: return Stamina;
      case 4: return Experience;
      case 32: return VipExp;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<FortuneType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      FortuneType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<FortuneType>() {
          public FortuneType findValueByNumber(int number) {
            return FortuneType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.dj.protobuf.common.CommonDefine.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final FortuneType[] VALUES = values();

  public static FortuneType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private FortuneType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:Protocols.FortuneType)
}

